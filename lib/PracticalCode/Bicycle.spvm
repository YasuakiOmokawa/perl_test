package PracticalCode::Bicycle {
  use SPVM::Hash;

  has size : string;
  has chain : string;
  has tire_size : string;

  sub new : PracticalCode::Bicycle ($args : SPVM::Hash) {
    my $self = new PracticalCode::Bicycle;
    $self->{size} = (string)$args->get("size");
    $self->{chain} = (string)$args->get("chain");
    $self->{tire_size} = (string)$args->get("tire_size");

    if ($self->{chain} == undef) { $self->{chain} = default_chain(); }
    if ($self->{tire_size} == undef) { $self->{tire_size} = default_tire_size(); }
    return $self;
  }

  # accessor
  sub size : string ($self : self) { return $self->{size}; }
  sub chain : string ($self : self) { return $self->{chain}; }
  sub tire_size : string ($self : self) { return $self->{tire_size}; }

  sub default_chain : string () {
    return "10-speed";
  }

  sub default_tire_size : string () {
    return "1.5";
  }

}