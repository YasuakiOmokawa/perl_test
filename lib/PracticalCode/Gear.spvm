package PracticalCode::Gear {
  use PracticalCode::Wheel;

  has chainring : int;
  has cog : int;
  has rim : int;
  has wheel : PracticalCode::Wheel;

  sub new : PracticalCode::Gear (
    $chainring : int, $cog : int, $wheel : PracticalCode::Wheel) {

    my $self = new PracticalCode::Gear;
    $self->{chainring} = $chainring;
    $self->{cog} = $cog;
    $self->{wheel} = $wheel;
    return $self;
  }

  # accessor
  sub chainring : int ($self : self) { return $self->{chainring}; }
  sub cog : float ($self : self) { return (float)$self->{cog}; }
  sub rim : int ($self : self) { return $self->{rim}; }
  sub wheel : PracticalCode::Wheel ($self : self) { return $self->{wheel}; }

  sub ratio : float ($self : self) {
    return $self->{chainring} / $self->cog;
  }

  sub gear_inches : double ($self : self) {
    return $self->ratio * $self->wheel->diameter;
  }

}