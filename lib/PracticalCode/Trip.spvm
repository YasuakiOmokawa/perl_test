package PracticalCode::Trip {
  use SPVM::Hash;

  has bicycles : int;
  has customers : int;
  has vehicle : int;

  sub new : PracticalCode::Trip ($args : SPVM::Hash) {
    my $self = new PracticalCode::Trip;
    $self->{bicycles} = $args->get_int("bicycles");
    $self->{customers} = $args->get_float("customers");
    $self->{vehicle} = $args->get_float("vehicle");
    return $self;
  }

  # accessor
  sub bicycles : int ($self : self) { return $self->{bicycles}; }
  sub customers : int ($self : self) { return $self->{customers}; }
  sub vehicle : int ($self : self) { return $self->{vehicle}; }

  sub prepare : int ($self : self, $prepares : int) {
    for (my $i = 0; $i < 10; $++) {
      switch ($prepares->[$i]) {
        case Mechanic: {
          $prepares->[$i].prepare_bicycles($self->bicycles);
          break;
        }
        case TripCordinator: {
          $prepares->[$i].buy_food($self->customers);
          break:
        }
        case Driver: {
          $prepares->[$i].gas_up($self->vehicle)
          break:
        }
        default: {

        }
      }
    }
  }

}